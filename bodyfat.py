# -*- coding: utf-8 -*-
"""bodyfat.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V5X9OLHCrKu6swPVjlr_NAK2Ttd2fcRQ

# **Business Understanding**

# **Project Domain**
Project yang saya buat ini ada pada domain Kesehatan dan Kebugaran badan
seseorang. Yang mana fokus pada estimasi kadar lemak tubuh seseorang menggunakan data antropometri (pengukuran tubuh) seperti berat badan, tinggi badan, lingkar leher, perut, paha, lengan, dan sebagainya. Estimasi ini diharapkan bermanfaat untuk individu yang ingin check kondisi badannya.

# **Problem Statement**
Mengetahui kadar lemak tubuh seseorang secara akurat itu biasanya membutuhkan alat khusus yang mahal atau memeriksakan diri ke ahlinya (dokter). Namun, tidak semua orang punya atau memiliki akses untuk memeriksakan diri menggunakan alat khusus ataupun ke dokter karena terkendala biaya. Lalu, bagaimana cara kita untuk mengetahui dan memprediksi kadar lemak tubuh yang hanya dengan data?

# **Goals**
Goals dari project ini adalah untuk membuat model ML berbasis ANN yang dapat memperkirakan atau memprediksi kadar lemak tubuh seseorang hanya berdasarkan data pengukuran dari fisik mereka, seperti berat badan, tinggi badan, dan lain-lainnya

# **Solution Statement**
Solusi dari project yang ditawarkan adalah membangun model prediksi menggunakan ANN, dengan data pengukuran tubuh/fisik sebagai input dan kadar lemak tubuhnya sebagai output. Model ini nantinya akan dapat diintegrasikan ke dalam aplikasi sederhana berbasis web (Menggunakan Streamlit), sehingga user yang ingin mencoba bisa meng-input datanya sendiri dan mendapatkan estimasi kadar lemak tubuh mereka

# **Data Understanding**

# **Import Data dari Kaggle**
"""

from google.colab import files
files.upload()

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
!ls ~/.kaggle

!kaggle datasets download -d fedesoriano/body-fat-prediction-dataset

!mkdir body-fat-prediction-dataset
!unzip body-fat-prediction-dataset.zip -d body-fat-prediction-dataset
!ls body-fat-prediction-dataset

"""# **Import Library**"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import joblib

from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn import preprocessing
from sklearn.preprocessing import StandardScaler

import tensorflow as tf
from tensorflow.keras.layers import Dense, Activation
from tensorflow.keras import Sequential
from tensorflow.keras.optimizers import Adam

df = pd.read_csv("body-fat-prediction-dataset/bodyfat.csv")
df.head()

print(df.info())
print(df.describe())

"""# **Exploratory Data Analysis**"""

#Korelasi antar Fitur (Heatmap)
#Untuk melihat hubungan antar variable, terutama mana yang paling berkorelasi dengan bodyfat

plt.figure(figsize=(10, 8))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()

#2. Distribusi Bodyfat menggunakan Histogram
#Untuk melihat sebaran bodyfat

plt.figure(figsize=(8, 6))
sns.histplot(df['BodyFat'], kde=True, bins=30)
plt.title('Distribution of Body Fat')
plt.xlabel('Body Fat (%)')
plt.ylabel('Frequency')

#3. Scatterplot Abdomen vs Bodyfat
# Pakai abdomen karna berkorelasi dengan bodyfat

plt.figure(figsize=(8, 6))
sns.scatterplot(x='Abdomen', y='BodyFat', data=df)
plt.title('Abdomen vs Body Fat')
plt.xlabel('Abdomen (cm)')
plt.ylabel('Body Fat (%)')
plt.show()

#4. Boxplot BodyFat berdasarkan kelompok umur (Age bins)
# Melihat kategori umur berdasarkan bodyfat

df['AgeGroup'] = pd.cut(df['Age'], bins=[15,25,35,45,55,65,75], labels=["15-25","26-35","36-45","46-55","56-65","66-75"])

plt.figure(figsize=(10,5))
sns.boxplot(x='AgeGroup', y='BodyFat', data=df, palette='Set2')
plt.title("Body Fat by Age Group")
plt.xlabel("Age Group")
plt.ylabel("Body Fat (%)")
plt.show()

#5. Pairplot beberapa fitur utama
#Untuk melihat hubungan visual dari fitur-fitur penting sekaligus

selected_features = ['BodyFat', 'Age', 'Abdomen', 'Weight', 'Height']
sns.pairplot(df[selected_features])
plt.suptitle("Pairplot of Selected Features", y=1.02)
plt.show()

"""# **Data Preparation**"""

if "AgeGroup" in df.columns:
    df.drop("AgeGroup", axis=1, inplace=True)

print(df.isnull().sum())

# Pisah fitur dan label
X = df.drop(columns=['BodyFat'])
y = df['BodyFat']

# Normalisasi fitur
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Simpan scaler
joblib.dump(scaler, 'scaler.pkl')

#Split data menjadi training dan testing set
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

"""# **Modelling ANN**"""

#Membangun model ANN
model = Sequential()
model.add(Dense(64, input_dim=X_train.shape[1], activation='relu'))
model.add(Dense(32, activation='relu'))
model.add(Dense(1, activation='linear'))

#Compile Model
model.compile(optimizer='adam', loss='mean_squared_error')

#Plot arsitektur model
plot_model(model, show_shapes=True, show_layer_names=True)

#Training model
history = model.fit(X_train, y_train, epochs=100, batch_size=32, validation_split=0.2, verbose=1)

"""# **Evaluasi Model**"""

#Prediksi model
y_pred = model.predict(X_test).flatten()

#Evaluasi
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error

print("R2 Score:", r2_score(y_test, y_pred))
print("MAE:", mean_absolute_error(y_test, y_pred))
print("MSE:", mean_squared_error(y_test, y_pred))

"""# **Deployment (Model Simulation & Save Model)**"""

# Simpan model ke .tflite
converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

with open('bodyfat_model.tflite', 'wb') as f:
    f.write(tflite_model)

# Label encoder dummy (meskipun regresi, agar sesuai ketentuan)
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
joblib.dump(le, 'labelencoder.pkl')  # Dummy encoder

# Dataset bisa disimpan juga
df.to_csv('bodyfat_clean.csv', index=False)